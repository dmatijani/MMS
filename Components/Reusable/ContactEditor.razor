@using MMS.Components.Helpers
@using MMS.Models.ViewModels
@using Radzen
@inject INotifications Notifications

<RadzenFieldset Text=@Title>
	<RadzenStack>
		@if (ChildContent != null)
		{
			@ChildContent
		}
		<RadzenRow>
			<RadzenButton Click=@AddContact ButtonStyle="ButtonStyle.Primary" Icon="add_circle" Text="Dodaj novi kontakt" Disabled=@Disabled />
			<RadzenButton Click=@RemoveAllContacts ButtonStyle="ButtonStyle.Danger" Icon="warning_amber" Text="Ukloni sve kontakte" Disabled=@Disabled />
		</RadzenRow>
		<RadzenStack>
			@foreach (var contact in UserData)
			{
				<RadzenCard Variant="Variant.Filled">
					<RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
						<RadzenRow AlignItems="AlignItems.Center">
							<RadzenDropDown @bind-Value=contact.Name Data=@possibleContacts Disabled=@Disabled />
							<RadzenTextBox @bind-Value=contact.Value AllowClear="false" MaxLength="80" Placeholder=@contact.Name Name=@contact.Id.ToString() Disabled=@Disabled />
							<RadzenRequiredValidator Component=@contact.Id.ToString() Text="Ne može ostati prazno!" />
						</RadzenRow>
						<RadzenButton ButtonStyle="ButtonStyle.Danger" Text="🗙" JustifyContent="JustifyContent.End" Click=@(() => RemoveOneContact(contact.Id)) Disabled=@Disabled />
					</RadzenRow>
				</RadzenCard>
			}
		</RadzenStack>
	</RadzenStack>
</RadzenFieldset>

@code {
	[Parameter]
	public string Title { get; set; } = "Ostali kontakti";

	[Parameter]
	public List<UserDataViewModel> UserData { get; set; }

	[Parameter]
	public bool Disabled { get; set; }

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	int contactId = 0;

	protected override async void OnInitialized()
	{
		if (UserData.Any())
		{
			contactId = UserData.Max(ud => ud.Id) + 1;
		}
	}

	public List<string> possibleContacts = new List<string>
	{
		"Sekundarni email",
		"Mobilni telefon",
		"Fiksni telefon",
		"Adresa",
		"Web mjesto",
		"Društvena mreža"
	};

	private void RemoveOneContact(int id)
	{
		UserData.RemoveAll(ud => ud.Id == id);
	}

	private void RemoveAllContacts()
	{
		contactId = 0;
		UserData = new List<UserDataViewModel>();
	}

	private void AddContact()
	{
		string whichContact = "";
		try
		{
			whichContact = possibleContacts.Where(c => !UserData.Select(ud => ud.Name).Contains(c)).First();
		}
		catch (Exception e)
		{
			Notifications.ShowErrorNotification("Već imaš sve kontakte!");
			return;
		}
		UserData.Add(new UserDataViewModel(contactId++, whichContact));
	}
}
