@page "/membership-request"
@using Radzen
@using MMS.Models.ViewModels
@rendermode InteractiveServer
@inject NotificationService NotificationService

<PageTitle>Zahtjev za članstvom</PageTitle>
<h3>Zahtjev za članstvom</h3>

<RadzenCard Variant="Variant.Filled">
	<RadzenTemplateForm TItem=MembershipRequestViewModel Data=@Model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
		<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center">
			<RadzenFieldset Text="Osnovni podaci">
				<RadzenRow JustifyContent="JustifyContent.SpaceBetween">
					<RadzenStack>
						<RadzenLabel Text="Ime*:" Component="NameText"></RadzenLabel>
						<RadzenTextBox @bind-Value=Model.Name Name="NameText" AllowClear="false" MaxLength="50" Placeholder="Vaše ime"></RadzenTextBox>
						<RadzenRequiredValidator Component="NameText" Text="Ime je obavezno!" />
					</RadzenStack>

					<RadzenStack>
						<RadzenLabel Text="Prezime*:" Component="SurnameText"></RadzenLabel>
						<RadzenTextBox @bind-Value=Model.Surname Name="SurnameText" AllowClear="false" MaxLength="50" Placeholder="Vaše prezime"></RadzenTextBox>
						<RadzenRequiredValidator Component="SurnameText" Text="Prezime je obavezno!" />
					</RadzenStack>

					<RadzenStack>
						<RadzenLabel Text="Primarna email adresa*:" Component="EmailText"></RadzenLabel>
						<RadzenTextBox @bind-Value=Model.PrimaryEmail Name="EmailText" AllowClear="false" Placeholder="Vaš primarni email"></RadzenTextBox>
						<RadzenRequiredValidator Component="EmailText" Text="Email adresa je obavezna!" />
						<RadzenEmailValidator Component="EmailText" Text="Nije unesena ispravna email adresa." />
					</RadzenStack>
				</RadzenRow>
			</RadzenFieldset>

			<RadzenFieldset Text="Razlog zahtjeva za članstvom">
				<RadzenStack>
					<RadzenText>Napišite razlog zašto želite postati član.</RadzenText>
					<RadzenLabel Text="Razlog:" Component="ReasonText"></RadzenLabel>
					<RadzenTextArea @bind-Value=Model.MembershipReason Name="ReasonText" Placeholder="U nekoliko riječi opišite zašto želite postati član (nije obavezno)."></RadzenTextArea>
				</RadzenStack>
			</RadzenFieldset>

			<RadzenFieldset Text="Ostali kontakti">
				<RadzenStack>
					<RadzenText>Ostali kontakti nisu nužni, no dobro dođu u slučaju da Vas želimo kontaktirati.</RadzenText>
					<RadzenRow>
						<RadzenButton Click=@AddContact ButtonStyle="ButtonStyle.Primary" Icon="add_circle" Text="Dodaj novi kontakt" />
						<RadzenButton Click=@RemoveAllContacts ButtonStyle="ButtonStyle.Danger" Icon="warning_amber" Text="Ukloni sve kontakte" />
					</RadzenRow>
					<RadzenStack>
						@foreach (var contact in Model.UserData)
						{
							<RadzenCard Variant="Variant.Filled">
								<RadzenRow AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
									<RadzenRow AlignItems="AlignItems.Center">
										<RadzenDropDown @bind-Value=contact.Name Data=@possibleContacts />
										<RadzenTextBox @bind-Value=contact.Value AllowClear="false" MaxLength="80" Placeholder=@contact.Name Name=@contact.Id.ToString() />
										<RadzenRequiredValidator Component=@contact.Id.ToString() Text="Ne može ostati prazno!" />
									</RadzenRow>
									<RadzenButton ButtonStyle="ButtonStyle.Danger" Text="🗙" JustifyContent="JustifyContent.End" Click=@(() => RemoveOneContact(contact.Id)) />
								</RadzenRow>
							</RadzenCard>
						}
					</RadzenStack>
				</RadzenStack>
			</RadzenFieldset>

			<RadzenButton ButtonType="ButtonType.Submit" Text="Pošalji" class="align-self-md-center" Disabled=@sending />
			@if (sending)
			{
				<RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
			}
		</RadzenStack>		
	</RadzenTemplateForm>
</RadzenCard>

@code {
	public MembershipRequestViewModel Model { get; set; } = new MembershipRequestViewModel
	{
		UserData = new List<UserDataViewModel>()
	};

	public List<string> possibleContacts = new List<string>
	{
		"Sekundarni email",
		"Mobilni telefon",
		"Fiksni telefon",
		"Adresa",
		"Web mjesto",
		"Društvena mreža"
	};

	public int contactId = 0;
	public bool sending = false;

	private void RemoveOneContact(int id)
	{
		Model.UserData.RemoveAll(ud => ud.Id == id);
	}

	private void RemoveAllContacts()
	{
		contactId = 0;
		Model.UserData = new List<UserDataViewModel>();
	}

	private void AddContact()
	{
		string whichContact = "";
		try
		{
			whichContact = possibleContacts.Where(c => !Model.UserData.Select(ud => ud.Name).Contains(c)).First();
		} catch (Exception e)
		{
			ShowErrorNotification("Već imaš sve kontakte!");
			return;
		}
		Model.UserData.Add(new UserDataViewModel(contactId++, whichContact));
	}

	private void ShowErrorNotification(string error)
	{
		NotificationService.Notify(new NotificationMessage
		{
			Severity = NotificationSeverity.Error,
			Duration = 5000,
			Summary = "Greška",
			Detail = error
		});
	}

	private async Task OnInvalidSubmit()
	{
		ShowErrorNotification("Podaci nisu ispravno uneseni.");
	}

	private async Task OnSubmit()
	{
		sending = true;
	}
}
