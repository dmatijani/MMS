@page "/membership-request"
@using MMS.Components.Helpers
@using MMS.Components.Reusable
@using MMS.Services
@using Radzen
@using MMS.Models.ViewModels
@rendermode InteractiveServer
@inject INotifications Notifications
@inject IUserService UserService

<PageTitle>MMS - Zahtjev za članstvom</PageTitle>
<h3>Zahtjev za članstvom</h3>

<RadzenText>Na ovoj stranici možete sastaviti zahtjev za članstvom.</RadzenText>

<RadzenCard Variant="Variant.Filled">
	<RadzenTemplateForm TItem=MembershipRequestViewModel Data=@Model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
		<RadzenStack Orientation="Orientation.Vertical" JustifyContent="JustifyContent.Center">
			<RadzenFieldset Text="Osnovni podaci">
				<RadzenRow JustifyContent="JustifyContent.SpaceBetween">
					<RadzenStack>
						<RadzenLabel Text="Ime*:" Component="NameText"></RadzenLabel>
						<RadzenTextBox @bind-Value=Model.Name Name="NameText" AllowClear="false" MaxLength="50" Placeholder="Vaše ime" Disabled=@sending></RadzenTextBox>
						<RadzenRequiredValidator Component="NameText" Text="Ime je obavezno!" />
					</RadzenStack>

					<RadzenStack>
						<RadzenLabel Text="Prezime*:" Component="SurnameText"></RadzenLabel>
						<RadzenTextBox @bind-Value=Model.Surname Name="SurnameText" AllowClear="false" MaxLength="50" Placeholder="Vaše prezime" Disabled=@sending></RadzenTextBox>
						<RadzenRequiredValidator Component="SurnameText" Text="Prezime je obavezno!" />
					</RadzenStack>

					<RadzenStack>
						<RadzenLabel Text="Primarna email adresa*:" Component="EmailText"></RadzenLabel>
						<RadzenTextBox @bind-Value=Model.PrimaryEmail Name="EmailText" AllowClear="false" Placeholder="Vaš primarni email" Disabled=@sending></RadzenTextBox>
						<RadzenRequiredValidator Component="EmailText" Text="Email adresa je obavezna!" />
						<RadzenEmailValidator Component="EmailText" Text="Nije unesena ispravna email adresa." />
					</RadzenStack>
				</RadzenRow>
			</RadzenFieldset>

			<RadzenFieldset Text="Razlog zahtjeva za članstvom">
				<RadzenStack>
					<RadzenText>Napišite razlog zašto želite postati član.</RadzenText>
					<RadzenLabel Text="Razlog:" Component="ReasonText"></RadzenLabel>
					<RadzenTextArea @bind-Value=Model.MembershipReason Name="ReasonText" Placeholder="U nekoliko riječi opišite zašto želite postati član (nije obavezno)." Disabled=@sending></RadzenTextArea>
				</RadzenStack>
			</RadzenFieldset>

			<ContactEditor UserData=@Model.UserData Disabled=@sending>
				<RadzenText>Ostali kontakti nisu nužni, no dobro dođu u slučaju da Vas želimo kontaktirati.</RadzenText>
				<RadzenText>Nije bitno da sad unesete sve kontakte jer <span style="font-weight: bold;">kontakte možete naknadno mijenjati!</span></RadzenText>
			</ContactEditor>

			<RadzenButton ButtonType="ButtonType.Submit" Text="Pošalji" class="align-self-md-center" Disabled=@sending />
			@if (sending && !successful)
			{
				<RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
			}
		</RadzenStack>		
	</RadzenTemplateForm>
	@if (successful)
	{
		<RadzenAlert AlertStyle="AlertStyle.Success" Title="Uspjeh!">
			Uspješno ste poslali zahtjev za članstvo. Nakon odobrenja zahtjeva od strane administratora, na Vaš primarni email <code style="color: white;">@Model.PrimaryEmail</code> dobit ćete <span style="font-style: italic;">Rješenje o članstvu</span> sa podacima za plaćanje članarine te pristupne podatke.
			<br />
			<a href="/">Natrag na početnu stranicu</a>
		</RadzenAlert>
	}
</RadzenCard>

@code {
	public MembershipRequestViewModel Model { get; set; } = new MembershipRequestViewModel
	{
		UserData = new List<UserDataViewModel>(),
		MembershipReason = ""
	};

	public bool sending = false;
	public bool successful = false;

	private void OnInvalidSubmit()
	{
		Notifications.ShowErrorNotification("Podaci nisu ispravno uneseni.");
	}

	private async Task OnSubmit()
	{
		sending = true;
		var result = await UserService.SendNewMembershipRequest(Model);
		if (!result.Flag)
		{
			Notifications.ShowErrorNotification(result.Message);
			sending = false;
		} else
		{
			Notifications.ShowSuccessNotification(result.Message);
			successful = true;
		}
	}
}
