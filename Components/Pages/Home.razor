@page "/"
@rendermode InteractiveServer
@using Radzen
@using MMS.Data.Repositories
@using MMS.Models
@using System.Security.Claims
@using MMS.Services
@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>MMS</PageTitle>

<RadzenCard Style="margin-top: 30px;">
	<RadzenStack AlignItems="AlignItems.Center" Gap="3rem">
		<h1 style="font-size: 8em; font-weight: bold;">MMS</h1>
		<AuthorizeView>
			<NotAuthorized>
				<RadzenText TextStyle="TextStyle.H6">Dobrodošli u sustav MMS! Ako nemate račun, možete poslati <span style="font-style: italic;">Zahtjev za članstvom</span>.</RadzenText>
				<RadzenRow JustifyContent="JustifyContent.Center" Gap="6rem">
					<RadzenStack AlignItems="AlignItems.Center" Gap="2rem">
						<RadzenText>Imam račun!</RadzenText>
						<RadzenButton Click=@LogInButtonClick style="width: 200px;">Prijava</RadzenButton>
					</RadzenStack>
					<RadzenStack AlignItems="AlignItems.Center" Gap="2rem">
						<RadzenText>Nemam račun!</RadzenText>
						<RadzenButton Click=@MembershipRequestButtonClick style="width: 200px;">Sastavi zahtjev</RadzenButton>
					</RadzenStack>
				</RadzenRow>
			</NotAuthorized>
			<Authorized>
				<RadzenText TextStyle="TextStyle.H6">Hej, <b>@context.User.Identity?.Name</b>! Prijavljeni ste u sustav.</RadzenText>
				<RadzenRow JustifyContent="JustifyContent.Center" Gap="6rem">
					<RadzenStack AlignItems="AlignItems.Center" Gap="2rem">
						<RadzenText>Želim na svoj profil.</RadzenText>
						<RadzenButton Click=@ProfileButtonClick style="width: 200px;">Profil</RadzenButton>
					</RadzenStack>
					<RadzenStack AlignItems="AlignItems.Center" Gap="2rem">
						<RadzenText>Želim se odjaviti.</RadzenText>
						<RadzenButton Click=@LogoutButtonClick style="width: 200px;">Odjava</RadzenButton>
					</RadzenStack>
				</RadzenRow>
			</Authorized>
		</AuthorizeView>
		
	</RadzenStack>
</RadzenCard>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; }

	protected override async Task OnInitializedAsync()
	{
		var state = await authenticationState;
		if (state != null)
		{
			if (state.User.IsInRole("Admin"))
			{
				NavigationManager.NavigateTo("/admin");
			}
		}

		await UserService.AddAdminUser();
	}

	private void LogInButtonClick()
	{
		NavigationManager.NavigateTo("/login");
	}

	private void MembershipRequestButtonClick()
	{
		NavigationManager.NavigateTo("/membership-request");
	}

	private void ProfileButtonClick()
	{
		NavigationManager.NavigateTo("/profile");
	}

	private void LogoutButtonClick()
	{
		NavigationManager.NavigateTo("/logout");
	}
}