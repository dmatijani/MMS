@page "/payments"
@using MMS.Components.Reusable
@using MMS.Services
@using Radzen;
@using MMS.Models;
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@rendermode InteractiveServer
@attribute [Authorize(Roles = "User")]
@attribute [StreamRendering]
@inject IUserService UserService
@inject NavigationManager NavigationManager

<PageTitle>MMS - Pregled uplata</PageTitle>

<TopTitle Title="Pregled uplata">
	@if (user != null)
	{
		<RadzenText>Ovdje možete vidjeti sve Vaše uplate, kao i preuzeti potvrde o istima, što se priložili.</RadzenText>
	}
</TopTitle>

<RadzenRow JustifyContent="JustifyContent.Center" Style="margin-top: 30px;">
	@if (user == null || loading)
	{
		<RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
	}
	else
	{
		<RadzenCard Variant="Variant.Outlined" Style="width: 100%">
			@foreach (var payment in payments)
			{
				<PaymentView Payment="payment" User="user" />
			}

			@if (!payments.Any())
			{
				<RadzenText>Ovaj korisnik još nema uplata.</RadzenText>
			}
		</RadzenCard>

	}
</RadzenRow>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; }

	public int UserId { get; set; } = 0;

	public User? user { get; set; } = null;
	public List<Payment> payments { get; set; } = new List<Payment>();

	public bool loading = true;

	protected override async Task OnInitializedAsync()
	{
		var state = await authenticationState;
		if (state == null)
		{
			NavigationManager.NavigateTo("/");
			return;
		}

		int userId;
		bool parsed = int.TryParse(state.User.FindFirstValue(ClaimTypes.NameIdentifier), out userId);
		if (!parsed)
		{
			NavigationManager.NavigateTo("/");
			return;
		}

		UserId = userId;

		await LoadUserAndPayments();
		if (user == null)
		{
			NavigationManager.NavigateTo("/admin/users");
			return;
		}
	}

	private async Task LoadUserAndPayments()
	{
		loading = true;
		StateHasChanged();
		user = await UserService.GetUserById(UserId);
		if (user == null)
		{
			return;
		}
		payments = user.Payments.OrderByDescending(p => p.Date).ToList();
		loading = false;
		StateHasChanged();
	}
}
