@page "/profile"
@using MMS.Components.Helpers
@using MMS.Components.Reusable
@using MMS.Models
@using MMS.Models.ViewModels
@using MMS.Services
@using MMS.Services.Responses
@using Microsoft.AspNetCore.Authorization
@using Radzen
@using System.Security.Claims
@rendermode InteractiveServer
@attribute [Authorize(Roles = "User")]
@attribute [StreamRendering]
@inject IUserService UserService
@inject IPaymentService PaymentService
@inject NavigationManager NavigationManager
@inject INotifications Notifications
@inject DialogService DialogService
@inject IPdfService PdfService

<PageTitle>MMS - Moj profil</PageTitle>

<TopTitle Title="Moj profil" BackHref="/">
	Na ovoj stranici moguće je vidjeti informacije o Vašem profilu te priložiti potvrde o uplati, kao i vidjeti sve vaše uplate.
</TopTitle>

<RadzenRow JustifyContent="JustifyContent.Center">
	@if (user == null || loading)
	{
		<RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
	}
	else
	{
		if (!user.ValidMembership)
		{
			<RadzenAlert AlertStyle="AlertStyle.Danger" AllowClose="false">
				@if (!hasPayments)
				{
					<span>
						Tvoj zahtjev za članstvom je odobren, no još nisi član! Potrebno je uplatiti članarinu. Članarina se plaća za godinu i članstvo
						vrijedi godinu dana od dana plaćanja. 
					</span>
					<RadzenButton Click=@OpenPaymentDialog>Uplati</RadzenButton>
				}
				else
				{
					<span>Tvoje članstvo je isteklo! Datum zadnje uplate: @lastPayment!.Date.ToString("dd.MM.yyyy."), što je duže od godinu dana. </span>
					<RadzenButton Click=@OpenPaymentDialog>Uplati</RadzenButton>
				}
			</RadzenAlert>
		} else
		{
			<RadzenAlert AlertStyle="AlertStyle.Success" AllowClose=@(user.ValidMembership)>
				<span>Tvoje članstvo je aktivno! Datum zadnje uplate: @lastPayment!.Date.ToString("dd.MM.yyyy.") </span>
				@if (canPay)
				{
					<RadzenButton Click=@OpenPaymentDialog>Uplati</RadzenButton>
				}
			</RadzenAlert>
		}
		<RadzenCard Class="rz-background-color-info-lighter" Style="width: 100%; margin-top: 30px;">
			<RadzenStack Style="overflow-x: auto;">
				<RadzenText TextStyle="TextStyle.H6">@(user.Name + " " + user.Surname)</RadzenText>
				<RadzenText><span style="font-weight: bold;">Primarna email adresa:</span> <code style="color: black">@user.Email</code></RadzenText>
				<RadzenText><span style="font-weight: bold;">Član/ica od:</span> @user.MembershipApprovalDate.ToString("dd.MM.yyyy. u HH:mm:ss")</RadzenText>
				@if (user.ValidMembership)
				{
					<RadzenButton Click=@DownloadMembershipConfirmation Style="width: 200px;">Preuzmi potvrdu o članstvu</RadzenButton>
				}
				<RadzenText>
					<span style="font-weight: bold;">Status članstva: </span>
					@if (user.ValidMembership)
					{
						<span style="color: green;">Aktivan</span>
					}
					else
					{
						<span style="color: red;">Neaktivan</span>
					}
				</RadzenText>
				@if (hasPayments)
				{
					<RadzenText><span style="font-weight: bold;">Zadnja uplata članarine:</span> @lastPayment!.Date.ToString("dd.MM.yyyy.")</RadzenText>
				}
				@if (user.ValidMembership)
				{
					<RadzenText>
						<span style="font-weight: bold;">Članarina vrijedi do:</span> @lastPayment!.DateUntil.ToString("dd.MM.yyyy.")
						<span> (broj dana: @((lastPayment!.DateUntil - DateTime.Now.Date).Days))</span>
					</RadzenText>
					<RadzenButton Click=@CheckUserPayments Style="width: 200px;">Pregled uplata</RadzenButton>
				}
				<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center">
					@if (canPay)
					{
						if (user.ValidMembership)
						{
							<RadzenText>Pošto je članarina uplaćena prošle godine, iako i dalje vrijedi, možete uplatiti članstvo za ovu godinu. Uplata vrijedi godinu dana:</RadzenText>
						}
						else
						{
							<RadzenText>Morate uplatiti članarinu:</RadzenText>
						}
						<RadzenButton Style="width: 200px;" Text="Uplati članarinu" Click=@OpenPaymentDialog />
					}
				</RadzenStack>
			</RadzenStack>
		</RadzenCard>
		<RadzenTemplateForm TItem="List<UserDataViewModel>" Data=@UserData Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit Style="width: 100%;" EditContext=@editContext>
			<RadzenStack>
				<ContactEditor UserData=@UserData Disabled=@updatingContacts>
					<RadzenText>Ovo su vaši ostali kontakti. Oni nisu nužni, no dobro dođu u slučaju da Vas želimo kontaktirati.</RadzenText>
				</ContactEditor>

				<RadzenButton ButtonStyle="ButtonStyle.Success" Text="Ažuriraj kontakte" class="align-self-md-center" ButtonType="ButtonType.Submit" Disabled=@updatingContacts />
			</RadzenStack>
		</RadzenTemplateForm>
	}
</RadzenRow>

@code {
	[CascadingParameter]
	private Task<AuthenticationState> authenticationState { get; set; }

	public User? user { get; set; } = null;
	public List<UserDataViewModel> UserData = new List<UserDataViewModel>();
	public Payment? lastPayment { get; set; } = null;

	public bool loading = true;
	public bool updatingContacts = false;

	public bool hasPayments = false;
	public bool canPay = true;

	public EditContext editContext { get; set; }

	RadzenUpload uploadComponent;
	public FileInfo? uploadedFile { get; set; } = null;

	public int contactId = 0;

	protected override async Task OnInitializedAsync()
	{
		var state = await authenticationState;
		if (state == null)
		{
			NavigationManager.NavigateTo("/");
			return;
		}

		int userId;
		bool parsed = int.TryParse(state.User.FindFirstValue(ClaimTypes.NameIdentifier), out userId);
		if (!parsed)
		{
			NavigationManager.NavigateTo("/");
			return;
		}

		user = await UserService.GetUserById(userId);
		if (user == null)
		{
			NavigationManager.NavigateTo("/");
			return;
		}

		CheckPaymentInfo();

		UserData = user.UserData.Select(ud =>
			new UserDataViewModel(
				contactId++,
				ud.Name,
				ud.Value
			)
		).ToList();

		loading = false;
	}

	private void CheckPaymentInfo()
	{
		lastPayment = null;
		hasPayments = false;
		canPay = true;
		var payments = user!.Payments.ToList();

		if (payments.Count == 0)
		{
			canPay = true;
			return;
		}

		hasPayments = true;
		lastPayment = payments.OrderByDescending(p => p.Date).First();

		canPay = !(lastPayment.Year == DateTime.Now.Year);
	}

	private void OnInvalidSubmit()
	{
		Notifications.ShowErrorNotification("Kontakti nisu ispravno uneseni.");
	}

	private async Task OnSubmit()
	{
		updatingContacts = true;
		user!.UserData = UserData.Select(ud => new UserData
		{
			Name = ud.Name,
			Value = ud.Value
		}).ToList();
		ServiceResponse response = await UserService.Update(user);
		if (!response.Flag)
		{
			Notifications.ShowErrorNotification(response.Message);
		} else
		{
			Notifications.ShowSuccessNotification("Kontakti su uspješno ažurirani.");
		}
		updatingContacts = false;
	}

	private async Task OpenPaymentDialog()
	{
		var result = await DialogService.OpenAsync("Potvrda o uplati", ds =>
			@<RadzenStack>
				<RadzenText>Prenesi potvrdu o uplati (PDF, maksimalna veličina datoteke: 1MB):</RadzenText>
					<RadzenUpload @ref="uploadComponent" Icon="upload" ChooseText="Prenesi" InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
						Multiple="false" Change=@OnUploadChange Accept="application/pdf" />
				<RadzenButton Text="Prenesi" Click=@(async () => { await CreateNewPayment(); ds.Close(); }) />
			</RadzenStack>
	);
	}

	private async Task<byte[]> ConvertFileToByteArray(FileInfo file)
	{
		using (var fileStream = file.OpenReadStream(1000*1024))
		{
			using (var memoryStream = new MemoryStream())
			{
				await fileStream.CopyToAsync(memoryStream);
				return memoryStream.ToArray();
			}
		}
	}

	public void OnUploadChange(UploadChangeEventArgs args)
	{
		if (args.Files.Count() == 0)
		{
			uploadedFile = null;
			return;
		}

		var file = args.Files.First();
		if (file.Size > 1024*1000)
		{
			Notifications.ShowErrorNotification("Datoteka je prevelika! Maksimalna veličina datoteke je 1MB.");
			uploadComponent.ClearFiles();
			return;
		}

		if (!file.Name.EndsWith(".pdf"))
		{
			Notifications.ShowErrorNotification("Datoteka smije biti samo u PDF formatu!");
			uploadComponent.ClearFiles();
			return;
		}

		uploadedFile = file;
	}

	private async Task CreateNewPayment()
	{
		if (uploadedFile == null)
		{
			Notifications.ShowErrorNotification("Nije prenesena potvrda o uplati!");
			return;
		}

		byte[] uploadedFileBytes;
		try
		{
			uploadedFileBytes = await ConvertFileToByteArray(uploadedFile);
		} catch (Exception ex)
		{
			Notifications.ShowErrorNotification("Greška kod prijenosa datoteke.");
			return;
		}

		Payment payment = new Payment
		{
			UserId = user!.Id,
			Date = DateTime.Now,
			File = uploadedFileBytes
		};

		ServiceResponse response = await PaymentService.SavePayment(payment);
		if (!response.Flag)
		{
			Notifications.ShowErrorNotification(response.Message);
		} else
		{
			Notifications.ShowSuccessNotification("Uplata je uspješno zabilježena.");
			await ReloadPaymentsForUser();
		}
	}

	private async Task ReloadPaymentsForUser()
	{
		user!.Payments = await PaymentService.GetPaymentsForUser(user);
		CheckPaymentInfo();
	}

	private async Task DownloadMembershipConfirmation()
	{
		byte[] documentBytes = PdfService.GetMembershipConfirmation(user!);
		await PdfService.DownloadPdf(documentBytes, $"Potvrda_o_članstvu_{user.Name}_{user.Surname}_{DateTime.Now.ToString("yyyy_MM_dd_hh_mm_ss")}");
	}

	private void CheckUserPayments()
	{
		NavigationManager.NavigateTo("/payments");
	}
}
