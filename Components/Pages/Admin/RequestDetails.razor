@page "/admin/requests/{userId:int}"
@using MMS.Components.Helpers
@using MMS.Models
@using MMS.Models.ViewModels
@using MMS.Services
@using MMS.Services.Responses
@using Microsoft.AspNetCore.Authorization
@using Radzen
@using System.Net.Mail
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]
@attribute [StreamRendering]
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject INotifications Notifications
@inject DialogService DialogService
@inject IMailService MailService
@inject IPdfService PdfService

<PageTitle>MMS - Zahtjev</PageTitle>
<h3>Pregled zahtjeva</h3>

<RadzenRow JustifyContent="JustifyContent.Center">
	@if (user == null || loading)
	{
		<RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
	} else
	{
		<RadzenCard Class="rz-background-color-info-lighter" Style="width: 100%;">
			<RadzenStack Style="overflow-x: auto;">
				<RadzenText><span style="font-weight: bold;">Zahtjev zatražio/la:</span> @(user.Name + " " + user.Surname)</RadzenText>
				<RadzenText><span style="font-weight: bold;">Primarna email adresa:</span> <code style="color: black">@user.Email</code></RadzenText>
				<RadzenText><span style="font-weight: bold;">Datum i vrijeme predaje zahtjeva:</span> @user.MembershipRequestDate.ToString("dd.MM.yyyy. u HH:mm:ss")</RadzenText>
				<RadzenText><span style="font-weight: bold;">Ostali podaci:</span></RadzenText>
				@if (user.UserData.Count > 0)
				{
					<ul>
						@foreach (var contact in user.UserData)
						{
							<li>@contact.Name: @contact.Value</li>
						}
					</ul>
				} else
				{
					<RadzenText Style="font-style: italic;" class="fw-lighter">Ostali podaci nisu navedeni.</RadzenText>
				}
				<RadzenText><span style="font-weight: bold;">Razlog učlanjenja:</span></RadzenText>
				<RadzenCard Variant="Variant.Flat">
					@if (user.MembershipReason != "")
					{
						<RadzenText>@user.MembershipReason</RadzenText>
					}
					else
					{
						<RadzenText Style="font-style: italic;" class="fw-lighter">Nije naveden.</RadzenText>
					}
				</RadzenCard>
			</RadzenStack>
		</RadzenCard>
		<RadzenFieldset Text="Potvrda zahtjeva" Style="width: 100%;">
			<RadzenText>Ovaj zahtjev možete potvrditi, ili ukloniti. Lozinka i pristupni podaci za korisnika automatski se generira i šalje tom korisniku na email.</RadzenText>
			<RadzenRow JustifyContent="JustifyContent.SpaceEvenly">
				<RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="check_circle" Text="Potvrdi zahtjev" Click=@ApproveRequestButtonClick Disabled=@(sending || rejected || approved) />
				<RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="report" Text="Odbij zahtjev" Click=@RejectRequestButtonClick Disabled=@(sending || rejected || approved) />
			</RadzenRow>
			@if (sending)
			{
				<RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
			}
		</RadzenFieldset>
		if (rejected || approved)
		{
			<RadzenAlert AlertStyle="AlertStyle.Success" Title="Uspjeh!">
				@if (rejected)
				{
					<span>Zahtjev je uspješno odbijen.</span>
				} else
				{
					<span>Zahtjev je uspješno prihvaćen. Osoba @user.Name @user.Surname dobit će <span style="font-style: italic;">Rješenje o članstvu</span> na email adresu <code style="color: white;">@user.Email</code> s pristupnim podacima te podacima za plaćanje članarine.</span>
				}
				<br />
				<a href="/admin/requests">Natrag na pregled zahtjeva</a>
			</RadzenAlert>
		}
	}
</RadzenRow>

@code {
	[Parameter]
	public int UserId { get; set; } = 0;

	public User? user { get; set; } = null;

	public bool loading = true;
	public bool sending = false;
	public bool rejected = false;
	public bool approved = false;

	protected override async Task OnInitializedAsync()
	{
		user = await UserService.GetUserById(UserId, false);
		if (user == null)
		{
			NavigationManager.NavigateTo("/admin/requests");
			return;
		}
		if (!string.IsNullOrEmpty(user.Password))
		{
			NavigationManager.NavigateTo("/admin/requests");
			return;
		}

		loading = false;
	}

	private async Task RejectRequestButtonClick()
	{
		bool? clicked = await DialogService.Confirm("Jesi li siguran da želiš odbiti zahtjev?", "Pazi!", new ConfirmOptions
		{
			OkButtonText = "Da",
			CancelButtonText = "Ne"
		});

		if (clicked == null)
		{
			return;
		}

		if (clicked == true)
		{
			await RejectRequest();
		}
	}

	private async Task ApproveRequestButtonClick()
	{
		bool? clicked = await DialogService.Confirm("Jesi li siguran da želiš potvrditi ovaj zahtjev?", "Pazi!", new ConfirmOptions
			{
				OkButtonText = "Da",
				CancelButtonText = "Ne"
			});

		if (clicked == null)
		{
			return;
		}

		if (clicked == true)
		{
			await ApproveRequest();
		}
	}

	private async Task RejectRequest()
	{
		sending = true;
		ServiceResponse response = await UserService.RejectRequest(user);
		sending = false;
		rejected = response.Flag;
		if (!response.Flag)
		{
			Notifications.ShowErrorNotification(response.Message);
		}
	}

	private async Task ApproveRequest()
	{
		sending = true;
		approved = false;
		ApprovedRequestServiceResponse response = await UserService.ApproveRequest(user);
		if (!response.Flag)
		{
			Notifications.ShowErrorNotification(response.Message);
			sending = false;
			return;
		}

		if (response.user == null)
		{
			Notifications.ShowErrorNotification("Greška kod dohvata novog korisnika.");
			sending = false;
			return;
		}

		bool successful = await SendApprovedRequestMail(response.user, response.password);
		sending = false;
		approved = successful;
		if (!successful)
		{
			Notifications.ShowErrorNotification("Greška kod slanja maila.");
		}
	}

	private async Task<bool> SendApprovedRequestMail(User user, string password)
	{
		string message = "<h3>Članstvo je odobreno</h3>";
		message += "Poštovani, Vaše članstvo je odobreno.";
		message += " U privitku se nalazi <span style='font-style: italic;'>Rješenje o članstvu</span> koje sadrži Vaše pristupne podatke.";

		Attachment? attachment = null;
		byte[] documentBytes = PdfService.GetMembershipDecision(user!, password);
		using (MemoryStream ms = new MemoryStream(documentBytes))
		{
			attachment = new Attachment(ms, "Rješenje_o_članstvu.pdf", "application/pdf");

			if (attachment == null)
			{
				return false;
			}

			MailMessage mail = MailService.MakeMailMessage(user.Email, "Vaše je članstvo odobreno - MMS", message, new List<Attachment> { attachment }, true);
			try
			{
				bool successful = await MailService.SendMail(mail);
				return successful;
			}
			catch (Exception ex)
			{
				return false;
			}
		}
	}
}
