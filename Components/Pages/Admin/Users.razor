@page "/admin/users"
@rendermode InteractiveServer
@attribute [Authorize(Roles = "Admin")]
@attribute [StreamRendering]
@using MMS.Components.Helpers
@using MMS.Components.Reusable
@using MMS.Models
@using MMS.Services
@using MMS.Services.Responses
@using Radzen
@using Microsoft.AspNetCore.Authorization
@inject IUserService UserService
@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject INotifications Notifications

<PageTitle>MMS - Postojeći korisnici</PageTitle>

<TopTitle Title="Postojeći korisnici">
	<RadzenText>Na ovoj stranici moguće je vidjeti sve odobrene korisnike trenutno u sustavu.</RadzenText>
</TopTitle>

<RadzenCard style="margin-top: 30px;">
	<RadzenRow JustifyContent="JustifyContent.Center">
		@if (loading)
		{
			<RadzenProgressBarCircular ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large" />
		}
		else
		{
			if (ExistingUsers.Count == 0)
			{
				<RadzenStack AlignItems="AlignItems.Center">
					<RadzenText>Nema korisnika u sustavu!</RadzenText>
					<RadzenText><a href="/admin/requests">Pregled zahtjeva za članstvom.</a></RadzenText>
					<RadzenText><a href="/admin">Natrag na administratorsku početnu stranicu.</a></RadzenText>
				</RadzenStack>
			} else
			{
				<RadzenDataList AllowVirtualization="false" WrapItems="true" AllowPaging="true" Data=@ExistingUsers TItem="User" PageSize="5" ShowPagingSummary="true" Style="width: 100%;">
					<Template Context="user">
						<RadzenCard class="rz-p-0" Style="width: 100%; overflow: hidden;">
							<RadzenRow JustifyContent="JustifyContent.SpaceBetween">
								<RadzenColumn Class="rz-background-color-info-lighter" Style="padding: 10px" SizeLG="4">
									<RadzenText TextStyle="TextStyle.H6">@(user.Name + " " + user.Surname)</RadzenText>
									<RadzenText><code style="color: black;">@user.Email</code></RadzenText>
									<RadzenText>Zahtjev predan @user.MembershipRequestDate.ToString("dd.MM.yyyy. u HH:mm:ss")</RadzenText>
									<RadzenText>Zahtjev odobren @user.MembershipApprovalDate.ToString("dd.MM.yyyy. u HH:mm:ss")</RadzenText>
									<RadzenText>Status članstva: <span style=@(user.ValidMembership? "color: green;" : "color: red;")>@(user.ValidMembership ? "Aktivan" : "Neaktivan")</span></RadzenText>
								</RadzenColumn>
								<RadzenColumn Style="padding: 10px; overflow-x: auto;" SizeLG="5">
									<RadzenText TextStyle="TextStyle.H6">Ostali podaci:</RadzenText>
									@if (user.UserData.Count > 0)
									{
										<ul>
											@foreach (var contact in user.UserData)
											{
												<li>@contact.Name: @contact.Value</li>
											}
										</ul>
									}
									else
									{
										<RadzenText Style="font-style: italic;" class="fw-lighter">Ostali podaci nisu navedeni.</RadzenText>
									}
								</RadzenColumn>
								<RadzenColumn Style="padding: 10px" SizeLG="3" Class="rz-background-color-info-lighter rz-text-align-center">
									<RadzenStack AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Style="height: 100%;">
										<RadzenButton Click=@(() => ViewPaymentsButtonClick(user))>
											Pregledaj plaćanja</RadzenButton>
										<RadzenButton Click=@(() => RemoveUserButtonClick(user)) ButtonStyle="ButtonStyle.Danger">Ukloni člana</RadzenButton>
									</RadzenStack>
								</RadzenColumn>
							</RadzenRow>
						</RadzenCard>
					</Template>
				</RadzenDataList>
			}
			@if (sending)
			{
				<RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
			}
		}
	</RadzenRow>
</RadzenCard>


@code {
	public List<User> ExistingUsers { get; set; } = new List<User>();
	public bool loading = true;
	public bool sending = false;

	protected override async Task OnInitializedAsync()
	{
		await LoadUsers();
	}

	private void ViewPaymentsButtonClick(User user)
	{
		NavigationManager.NavigateTo("/admin/payments/" + user.Id);
	}

	private async void RemoveUserButtonClick(User user)
	{
		bool? clicked = await DialogService.Confirm($"Jesi li siguran da želiš ukloniti korisnika {user.Name} {user.Surname}?", "Pazi!", new ConfirmOptions
		{
			OkButtonText = "Da",
			CancelButtonText = "Ne"
		});

		if (clicked == null)
		{
			return;
		}

		if (clicked == true)
		{
			await DeleteUser(user);
		}
	}

	private async Task DeleteUser(User user)
	{
		sending = true;
		StateHasChanged();
		ServiceResponse response = await UserService.DeleteUser(user);
		sending = false;
		StateHasChanged();
		if (!response.Flag)
		{
			Notifications.ShowErrorNotification(response.Message);
		} else
		{
			Notifications.ShowSuccessNotification("Korisnik uspješno izbrisan!");
			await LoadUsers();
		}
	}

	private async Task LoadUsers()
	{
		loading = true;
		StateHasChanged();
		ExistingUsers = await UserService.GetExistingUsers();
		loading = false;
		StateHasChanged();
	}
}
